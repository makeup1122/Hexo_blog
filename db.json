{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.css","path":"main.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.svg","path":"fonts/default-skin.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.js","path":"main.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1477555259718},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1477555259719},{"_id":"themes/yilia/README.md","hash":"9b4c1fa6eda1bcb158d40abab29798229152dd21","modified":1477555259719},{"_id":"themes/yilia/_config.yml","hash":"e96829298a390c7d714c790f79755b0f197fdc1b","modified":1477617085000},{"_id":"themes/yilia/package.json","hash":"ca3d0baf7d02f8d48c6f0cd51bfa4d663f9e5415","modified":1477555259730},{"_id":"themes/yilia/webpack.config.js","hash":"4d5cb8ee6cefdfb65fa17e2481e177a2b2f4153e","modified":1477555259775},{"_id":"source/_posts/github-webhooks.md","hash":"8087f8df3c96ed9c4cad79c5bc09cfa9cf0a660e","modified":1477645420797},{"_id":"source/_posts/hexo-operate.md","hash":"898604b6a1961bdf37e8a09545d6aec911db2a52","modified":1477617068240},{"_id":"source/_posts/git相关.md","hash":"539ec8199679e65007b8ca1cb87f6895dc070ccb","modified":1477562142160},{"_id":"source/_posts/ssh动态端口转发命令解析.md","hash":"de3d84aca35cfceed57adc846461e9717af94400","modified":1477617068240},{"_id":"source/_posts/tmux.md","hash":"5c9994caa880d355ba3dadc8a0c1a4a8854383e2","modified":1477362606762},{"_id":"source/plan/index.md","hash":"e5be535555ad929522794bcf63b466753fe121da","modified":1477645295728},{"_id":"source/tags/index.md","hash":"79f250769862a417b4301dc656f33a30daa56753","modified":1477293571000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1477555259629},{"_id":"themes/yilia/.git/COMMIT_EDITMSG","hash":"efc5e22a45242a2e145134c29f116b04f5565679","modified":1477617187951},{"_id":"themes/yilia/.git/config","hash":"24300cece9d72967ea63724bdb2a8e3c2ac2cc52","modified":1477555259706},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1477555242388},{"_id":"themes/yilia/.git/index","hash":"cd35a518628a6691c2630819a3eca0bf5cc165b0","modified":1477617187920},{"_id":"themes/yilia/.git/packed-refs","hash":"ded199a39a08ce404b54b6f5843e0ed75e4d0917","modified":1477555259626},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1477555259720},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1477555259720},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1477555259721},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1477555259721},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1477555259721},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1477555259721},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1477555259722},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1477555259728},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1477555259728},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1477555259728},{"_id":"themes/yilia/layout/layout.ejs","hash":"6759bdc3646d6c03f9dbc7abffcb2b5e4522c724","modified":1477555259728},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1477555259728},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1477555259729},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1477555259729},{"_id":"themes/yilia/source/main.css","hash":"a9b519362f0fc53acbd5e92eba737e5e6ac7bc0b","modified":1477555259768},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1477555242388},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1477555242388},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1477555242389},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1477555242389},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1477555242390},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1477555242389},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1477555242390},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1477555242390},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1477555242390},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1477555242391},{"_id":"themes/yilia/.git/logs/HEAD","hash":"312cb1ee7b85ac02eadf9766c56d408e40e20c86","modified":1477617187951},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"322fc94d2cb7d798232164e4de91daa727722c06","modified":1477555259722},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1477555259722},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1477555259723},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"3f06859cd91d8ee6ada026914b590f37d56ec4cc","modified":1477555259723},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1477555259723},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1477555259724},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"0d5f8d8f4c1aefcf34f816cb8ebda41a8926b547","modified":1477555259724},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"63d53c26f6ef7d2b4d96de3a2d3d7bd385f8dfda","modified":1477555259724},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"5b4597ddf03486fc15fd6ae77fd05582cbfdff13","modified":1477555259724},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1477555259725},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"5f040ce3efed03adc5a0725187522bca800460f4","modified":1477555259725},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"fe0fd2f17b14d3fedfef43b6acadead38183b2a2","modified":1477555259727},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1477555259727},{"_id":"themes/yilia/source/fonts/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1477555259765},{"_id":"themes/yilia/source/fonts/icomoon.eot","hash":"9a661069e1255d10032926a8ef87502f445f4e20","modified":1477555259765},{"_id":"themes/yilia/source/fonts/icomoon.svg","hash":"2f9c8a34e40173ab8b6e3f0f761ece4d2b7a8f68","modified":1477555259766},{"_id":"themes/yilia/source/fonts/icomoon.ttf","hash":"9f1e824fc076dbfedf186609a2664558d5e3e986","modified":1477555259766},{"_id":"themes/yilia/source/fonts/icomoon.woff","hash":"a5c2eb785800a3a0aeaf2284d191d69df1893d6d","modified":1477555259767},{"_id":"themes/yilia/source/main.js","hash":"82e1615f45cbd5f4855363cdde2b42609f72e9af","modified":1477555259769},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1477555259730},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1477555259730},{"_id":"themes/yilia/source-src/css/archive-inner.scss","hash":"8124ba50f355f88ac6132b2a6b9ddd5ecdd18f19","modified":1477555259730},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"8a0ae8ee6af8df3f215f1cd4ecc10145a5b92cf0","modified":1477555259731},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"75f07aa38b0e56c7279c96d4d1a5061c3ba97a96","modified":1477555259731},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"ed5940f0881e36a75235ff8fbd024c8ee7b3cd46","modified":1477555259731},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"58c055d54cf1c9551c8b71e9d8cbe1715593bebb","modified":1477555259732},{"_id":"themes/yilia/source-src/css/article.scss","hash":"1af257c2de4a13464196e875fe18fefe7d2d4cd9","modified":1477555259732},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"7d2e6d6ce87732fe5b3799a6e9e1f737a79ed736","modified":1477555259734},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"1c79e1cd8b00d6d89cca00c2a101e6639c378a9b","modified":1477555259734},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1477555259736},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1477555259736},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"9b660a5a820caf394ae497f262e80f9ed35bf219","modified":1477555259736},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"0267e2febaef284cf319235435643232fdeee0c9","modified":1477555259737},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0940b74a29101c97573efd8e492ee39cef5e2dc8","modified":1477555259742},{"_id":"themes/yilia/source-src/css/main.scss","hash":"bdd600d274233c001a0fb89f7f89af66bb04a147","modified":1477555259742},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"facd3d41bc9b2d2c6134fc0fbd379a3b0c18476b","modified":1477555259743},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"e5e55e5ffe23b4e8caba38b7cb887c73f6802fd4","modified":1477555259743},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1477555259743},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1477555259744},{"_id":"themes/yilia/source-src/css/social.scss","hash":"ccb2c214d2c0efae41066fa85afb4d7288e55cbf","modified":1477555259744},{"_id":"themes/yilia/source-src/css/switch.scss","hash":"a4c1872aff9509441f4d723801a9b3f7db161a41","modified":1477555259744},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1477555259745},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"eed50d74e5f272af5dc5f7f335ded2c95bb5359f","modified":1477555259745},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"d935b2e71780f47a62e450fc8d6f2a19d22836d5","modified":1477555259745},{"_id":"themes/yilia/source-src/js/archive-inner.js","hash":"07f0124f9c2c677178ee4365a72dc1f07da931dd","modified":1477555259746},{"_id":"themes/yilia/source-src/js/browser.js","hash":"bb2e9a1ddcb34372e6cbdd9e9ecfd3dc87623451","modified":1477555259746},{"_id":"themes/yilia/source-src/js/fix-page.js","hash":"940b580d6243461788c28bdd09b8049642a90e13","modified":1477555259746},{"_id":"themes/yilia/source-src/js/jquery.lazyload.js","hash":"2258765aa8b606cc095900daedf2666c46383de8","modified":1477555259749},{"_id":"themes/yilia/source-src/js/main.js","hash":"033b8c092eff6fcb4147c8880bca79fe56e9c095","modified":1477555259749},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"d5abbdaf16fd4c8ee9ee802cfd4b6aeb34073893","modified":1477555259750},{"_id":"themes/yilia/source-src/js/tags.js","hash":"a8da9d6e3031c960f9859ef519233ad3ab65d0ef","modified":1477555259750},{"_id":"themes/yilia/source-src/js/tools.js","hash":"eb36f563b76e9431dc109856a78383ed11763a84","modified":1477555259750},{"_id":"themes/yilia/source-src/js/util.js","hash":"cf91a9c9c973e2ee05d50a24a11c411c36264238","modified":1477555259751},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"8f545a5959ff5568969a46884fa0c164d008767b","modified":1477555259751},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe-ui-default.js","hash":"05fa305ec449deb59b04e2ae118a8e3ec5250e1b","modified":1477555259761},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe-ui-default.min.js","hash":"852a1fcdaacf66754090fc6d432013c5c657ab80","modified":1477555259762},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.scss","hash":"b80bb4efe9ac36a566f037fb6984af8b486a9d5c","modified":1477555259764},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.min.js","hash":"39806b9989eaecbc3e032da8de77f69e0c9ff779","modified":1477555259764},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.js","hash":"b616337e586eaa5afcf5bb77c927bd1b09a25524","modified":1477555259763},{"_id":"themes/yilia/.git/objects/8c/3f90428d7ec0cd2238910ef8d77c7038cc6506","hash":"65e2a1a3e7e8d2a741fb17986932f4e5d369dcd3","modified":1477617187920},{"_id":"themes/yilia/.git/objects/92/42d14fc036a25f3a0f8efd86beb648dd23c897","hash":"af0e1f124d37209d49da7d402d198ded0ad36a8e","modified":1477617187951},{"_id":"themes/yilia/.git/objects/bb/f946eacaa5ee3add4f9b6a32a271313dff5203","hash":"9e3e6e931e3645c5e4ca664d59fce870092a0b96","modified":1477617174806},{"_id":"themes/yilia/.git/refs/heads/master","hash":"32fc81b71d2da6d48fe101adb590ef13a1147d69","modified":1477617187951},{"_id":"themes/yilia/.git/objects/pack/pack-b0a5e71bdf83ccc62eb7ecf84d54c284220235cb.idx","hash":"2f8546914c7f34d9ba8afdbbdb444d6cab0d5a52","modified":1477555258289},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"2fd6338379fd50ea8282f065ffadc838f94e6015","modified":1477555259725},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"d5c0e472dd9e8b036f977745ff50056813f6b1b0","modified":1477555259725},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1477555259726},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1477555259726},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"5b3583114f45a3f8017a6ff900d1b72ddea2a6df","modified":1477555259726},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"f6204220060a2b77a609fcaaa81f639d0b02e3af","modified":1477555259726},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"e6edf173da77fb851fc067a481a897ad934cc4ca","modified":1477555259727},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1477555259727},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"8381a373d85daee53cc3247467ffa4db58ae1b88","modified":1477555259732},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1477555259732},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"4dd97aa8aa0ffb312a7d3c6e0f82b85642f7f2e7","modified":1477555259733},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1477555259733},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1477555259734},{"_id":"themes/yilia/source-src/css/fonts/icomoon.eot","hash":"9a661069e1255d10032926a8ef87502f445f4e20","modified":1477555259735},{"_id":"themes/yilia/source-src/css/fonts/icomoon.svg","hash":"2f9c8a34e40173ab8b6e3f0f761ece4d2b7a8f68","modified":1477555259735},{"_id":"themes/yilia/source-src/css/fonts/icomoon.ttf","hash":"9f1e824fc076dbfedf186609a2664558d5e3e986","modified":1477555259736},{"_id":"themes/yilia/source-src/css/fonts/icomoon.woff","hash":"a5c2eb785800a3a0aeaf2284d191d69df1893d6d","modified":1477555259736},{"_id":"themes/yilia/source-src/css/img/black-scales.png","hash":"243ea748d016704922ccfc0b6c18d97472c27bff","modified":1477555259737},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1477555259738},{"_id":"themes/yilia/source-src/css/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1477555259738},{"_id":"themes/yilia/source-src/css/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1477555259738},{"_id":"themes/yilia/source-src/css/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1477555259739},{"_id":"themes/yilia/source-src/css/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1477555259739},{"_id":"themes/yilia/source-src/css/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1477555259739},{"_id":"themes/yilia/source-src/css/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1477555259739},{"_id":"themes/yilia/source-src/css/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1477555259740},{"_id":"themes/yilia/source-src/css/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1477555259740},{"_id":"themes/yilia/source-src/css/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1477555259740},{"_id":"themes/yilia/source-src/css/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1477555259740},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1477555259740},{"_id":"themes/yilia/source-src/css/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1477555259741},{"_id":"themes/yilia/source-src/css/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1477555259741},{"_id":"themes/yilia/source-src/css/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1477555259741},{"_id":"themes/yilia/source-src/css/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1477555259741},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1477555259751},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1477555259752},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1477555259753},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.scss","hash":"3f8f8062d24cce2158d3c02bdfc56c000f1a1f9b","modified":1477555259752},{"_id":"themes/yilia/source-src/css/img/black-paper.png","hash":"a180d3109a5cb6b9b9aa60d81730446ebe275473","modified":1477555259737},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"312cb1ee7b85ac02eadf9766c56d408e40e20c86","modified":1477617187951},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1477555259627},{"_id":"themes/yilia/source-src/js/jquery.js","hash":"aa6ccf721c4e76921abda46c120772d364e5b285","modified":1477555259749},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"19e51010d19cc523cb052bfde12b5852e7bf6a37","modified":1477555259628},{"_id":"themes/yilia/.git/objects/pack/pack-b0a5e71bdf83ccc62eb7ecf84d54c284220235cb.pack","hash":"da471acd87f29dd2d08f9f8ce122906f8633c868","modified":1477617187000}],"Category":[],"Data":[],"Page":[{"title":"Plan","date":"2016-10-27T09:32:49.000Z","_content":"### 总是异想天开\n\n* 2016.10  [1/1][github.io博客](/2016/10/24/hexo-operate/)\n* 2016.10  [1/3][小花老师的日常](http://libing.win:3000)\n    1. [1/1] 基础功能\n    2. [1/1] Sequelize\n    3. [0/1]安全性\n    4. [0/1]图片上传优化\n* 2016.11  [1/2]学习github webhooks\n    1. [1/1]概念\n    2. [0/1]增加安全性\n* 遥遥无期  [0/0]自搭建图床服务","source":"plan/index.md","raw":"---\ntitle: Plan\ndate: 2016-10-27 17:32:49\n---\n### 总是异想天开\n\n* 2016.10  [1/1][github.io博客](/2016/10/24/hexo-operate/)\n* 2016.10  [1/3][小花老师的日常](http://libing.win:3000)\n    1. [1/1] 基础功能\n    2. [1/1] Sequelize\n    3. [0/1]安全性\n    4. [0/1]图片上传优化\n* 2016.11  [1/2]学习github webhooks\n    1. [1/1]概念\n    2. [0/1]增加安全性\n* 遥遥无期  [0/0]自搭建图床服务","updated":"2016-10-28T09:35:21.326Z","path":"plan/index.html","_id":"ciutjxu2y0001x0dzs0wp1b38","comments":1,"layout":"page","content":"<h3 id=\"总是异想天开\"><a href=\"#总是异想天开\" class=\"headerlink\" title=\"总是异想天开\"></a>总是异想天开</h3><ul>\n<li>2016.10  [1/1]<a href=\"/2016/10/24/hexo-operate/\">github.io博客</a></li>\n<li>2016.10  [1/3]<a href=\"http://libing.win:3000\" target=\"_blank\" rel=\"external\">小花老师的日常</a><ol>\n<li>[1/1] 基础功能</li>\n<li>[1/1] Sequelize</li>\n<li>[0/1]安全性</li>\n<li>[0/1]图片上传优化</li>\n</ol>\n</li>\n<li>2016.11  [1/2]学习github webhooks<ol>\n<li>[1/1]概念</li>\n<li>[0/1]增加安全性</li>\n</ol>\n</li>\n<li>遥遥无期  [0/0]自搭建图床服务</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"总是异想天开\"><a href=\"#总是异想天开\" class=\"headerlink\" title=\"总是异想天开\"></a>总是异想天开</h3><ul>\n<li>2016.10  [1/1]<a href=\"/2016/10/24/hexo-operate/\">github.io博客</a></li>\n<li>2016.10  [1/3]<a href=\"http://libing.win:3000\">小花老师的日常</a><ol>\n<li>[1/1] 基础功能</li>\n<li>[1/1] Sequelize</li>\n<li>[0/1]安全性</li>\n<li>[0/1]图片上传优化</li>\n</ol>\n</li>\n<li>2016.11  [1/2]学习github webhooks<ol>\n<li>[1/1]概念</li>\n<li>[0/1]增加安全性</li>\n</ol>\n</li>\n<li>遥遥无期  [0/0]自搭建图床服务</li>\n</ul>\n"},{"title":"tags","date":"2016-10-24T07:19:12.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-10-24 15:19:12\ntype: \"tags\"\n---\n","updated":"2016-10-24T07:19:31.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciutjxu3t000ix0dz5d02w69c","content":"","excerpt":"","more":""}],"Post":[{"title":"git-webhooks","date":"2016-10-28T09:03:40.000Z","_content":"### 前言\ngit的webhooks是个好东西呀，怎么没早点发现!github和git.oschina 也早已都支持了，看来是我out了。\n原理是当设置了某个线上git代码库的webhooks后，当代码库发生指定事件(比如push、pull、create、delete等等)时，就会向指定的URL链接发起请求(POST)，\n这样就可以发挥想象力做很多事件，最常见的应该就是当有push操作时，同步更新线上的代码。省去了登录线上服务器，进行pull代码等重复操作。\n下文皆以github为例子，其他代码托管网站应该都类似的。\n### 添加webhooks\n1. 参数\n    `Payload URL`是必填参数，即发生指定事件时要通知的链接。\n    `Content type` 发送请求的内容类型，有json格式和form data两种。\n    `secret` 自定义密钥，被加载请求中一并发给`Payload URL`，保存在header的X-Hub-Signature中，可以用作验证请求。\n2. 可用事件:https://developer.github.com/webhooks/#events\n\n### node.js版服务端测试代码\n    var http = require('http');\n    var child_process = require(\"child_process\");\n    http.createServer(function(req, res) {\n        var post_data = '';\n        req.on('data', function(chunk) {\n            post_data += chunk;\n        });\n        req.on('end', function() {\n            var result = child_process.execSync('git pull origin master');\n        });\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.end('get push post!');\n    }).listen(8888);\n    \n参考文档:https://developer.github.com/webhooks/","source":"_posts/github-webhooks.md","raw":"---\ntitle: git-webhooks\ndate: 2016-10-28 17:03:40\ntags:\n- git\n---\n### 前言\ngit的webhooks是个好东西呀，怎么没早点发现!github和git.oschina 也早已都支持了，看来是我out了。\n原理是当设置了某个线上git代码库的webhooks后，当代码库发生指定事件(比如push、pull、create、delete等等)时，就会向指定的URL链接发起请求(POST)，\n这样就可以发挥想象力做很多事件，最常见的应该就是当有push操作时，同步更新线上的代码。省去了登录线上服务器，进行pull代码等重复操作。\n下文皆以github为例子，其他代码托管网站应该都类似的。\n### 添加webhooks\n1. 参数\n    `Payload URL`是必填参数，即发生指定事件时要通知的链接。\n    `Content type` 发送请求的内容类型，有json格式和form data两种。\n    `secret` 自定义密钥，被加载请求中一并发给`Payload URL`，保存在header的X-Hub-Signature中，可以用作验证请求。\n2. 可用事件:https://developer.github.com/webhooks/#events\n\n### node.js版服务端测试代码\n    var http = require('http');\n    var child_process = require(\"child_process\");\n    http.createServer(function(req, res) {\n        var post_data = '';\n        req.on('data', function(chunk) {\n            post_data += chunk;\n        });\n        req.on('end', function() {\n            var result = child_process.execSync('git pull origin master');\n        });\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.end('get push post!');\n    }).listen(8888);\n    \n参考文档:https://developer.github.com/webhooks/","slug":"github-webhooks","published":1,"updated":"2016-10-28T10:01:09.239Z","_id":"ciutjxu2u0000x0dzxv4bm8kt","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>git的webhooks是个好东西呀，怎么没早点发现!github和git.oschina 也早已都支持了，看来是我out了。<br>原理是当设置了某个线上git代码库的webhooks后，当代码库发生指定事件(比如push、pull、create、delete等等)时，就会向指定的URL链接发起请求(POST)，<br>这样就可以发挥想象力做很多事件，最常见的应该就是当有push操作时，同步更新线上的代码。省去了登录线上服务器，进行pull代码等重复操作。<br>下文皆以github为例子，其他代码托管网站应该都类似的。</p>\n<h3 id=\"添加webhooks\"><a href=\"#添加webhooks\" class=\"headerlink\" title=\"添加webhooks\"></a>添加webhooks</h3><ol>\n<li>参数<br> <code>Payload URL</code>是必填参数，即发生指定事件时要通知的链接。<br> <code>Content type</code> 发送请求的内容类型，有json格式和form data两种。<br> <code>secret</code> 自定义密钥，被加载请求中一并发给<code>Payload URL</code>，保存在header的X-Hub-Signature中，可以用作验证请求。</li>\n<li>可用事件:<a href=\"https://developer.github.com/webhooks/#events\" target=\"_blank\" rel=\"external\">https://developer.github.com/webhooks/#events</a></li>\n</ol>\n<h3 id=\"node-js版服务端测试代码\"><a href=\"#node-js版服务端测试代码\" class=\"headerlink\" title=\"node.js版服务端测试代码\"></a>node.js版服务端测试代码</h3><pre><code>var http = require(&apos;http&apos;);\nvar child_process = require(&quot;child_process&quot;);\nhttp.createServer(function(req, res) {\n    var post_data = &apos;&apos;;\n    req.on(&apos;data&apos;, function(chunk) {\n        post_data += chunk;\n    });\n    req.on(&apos;end&apos;, function() {\n        var result = child_process.execSync(&apos;git pull origin master&apos;);\n    });\n    res.writeHead(200, { &apos;Content-Type&apos;: &apos;text/plain&apos; });\n    res.end(&apos;get push post!&apos;);\n}).listen(8888);\n</code></pre><p>参考文档:<a href=\"https://developer.github.com/webhooks/\" target=\"_blank\" rel=\"external\">https://developer.github.com/webhooks/</a></p>\n","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>git的webhooks是个好东西呀，怎么没早点发现!github和git.oschina 也早已都支持了，看来是我out了。<br>原理是当设置了某个线上git代码库的webhooks后，当代码库发生指定事件(比如push、pull、create、delete等等)时，就会向指定的URL链接发起请求(POST)，<br>这样就可以发挥想象力做很多事件，最常见的应该就是当有push操作时，同步更新线上的代码。省去了登录线上服务器，进行pull代码等重复操作。<br>下文皆以github为例子，其他代码托管网站应该都类似的。</p>\n<h3 id=\"添加webhooks\"><a href=\"#添加webhooks\" class=\"headerlink\" title=\"添加webhooks\"></a>添加webhooks</h3><ol>\n<li>参数<br> <code>Payload URL</code>是必填参数，即发生指定事件时要通知的链接。<br> <code>Content type</code> 发送请求的内容类型，有json格式和form data两种。<br> <code>secret</code> 自定义密钥，被加载请求中一并发给<code>Payload URL</code>，保存在header的X-Hub-Signature中，可以用作验证请求。</li>\n<li>可用事件:<a href=\"https://developer.github.com/webhooks/#events\">https://developer.github.com/webhooks/#events</a></li>\n</ol>\n<h3 id=\"node-js版服务端测试代码\"><a href=\"#node-js版服务端测试代码\" class=\"headerlink\" title=\"node.js版服务端测试代码\"></a>node.js版服务端测试代码</h3><pre><code>var http = require(&apos;http&apos;);\nvar child_process = require(&quot;child_process&quot;);\nhttp.createServer(function(req, res) {\n    var post_data = &apos;&apos;;\n    req.on(&apos;data&apos;, function(chunk) {\n        post_data += chunk;\n    });\n    req.on(&apos;end&apos;, function() {\n        var result = child_process.execSync(&apos;git pull origin master&apos;);\n    });\n    res.writeHead(200, { &apos;Content-Type&apos;: &apos;text/plain&apos; });\n    res.end(&apos;get push post!&apos;);\n}).listen(8888);\n</code></pre><p>参考文档:<a href=\"https://developer.github.com/webhooks/\">https://developer.github.com/webhooks/</a></p>\n"},{"title":"hexo基本操作","date":"2016-10-23T19:45:02.000Z","_content":"### 基本操作\n\n初始化\n`hexo init`\n\n新建文章\n`hexo new [layout]<title>`\n如果layout为空，则使用配置文件_config.yml中的`default_layout`(默认为:post)。\n\n生成静态文件\n`hexo generate `\n\n发表草稿\n`hexo publish [layout] <filename>`\n\n部署\n`hexo deploy`\n如果配置好_config.yml中的deploy，即可自动发布的github.io\n\n获取文件列表\n`hexo list <type>`\ntype为post/draft/page等\n\n清理工作目录\n`hexo clean`\n\n启动本地服务\n`hexo server -p 8090`\n\n***\n\n### 问题\n1. hexo在本地测试运行重启后页面一直空白，提示 ： `WARN No layout: index.html`,确定theme目录下，相应的目录是否存在或为空\n\n2. 部署时出现 `error deployer not found:git`错误，可以能是未安装`hexo-deployer-git`模块 。执行 ：\n    `npm install hexo-deployer-git --save`即可。  \n3. 有的theme是不支持Tags的。。。。比如Hacker\n","source":"_posts/hexo-operate.md","raw":"---\ntitle: hexo基本操作\ndate: 2016-10-24 03:45:02\ntags:\n- hexo\n- github\n---\n### 基本操作\n\n初始化\n`hexo init`\n\n新建文章\n`hexo new [layout]<title>`\n如果layout为空，则使用配置文件_config.yml中的`default_layout`(默认为:post)。\n\n生成静态文件\n`hexo generate `\n\n发表草稿\n`hexo publish [layout] <filename>`\n\n部署\n`hexo deploy`\n如果配置好_config.yml中的deploy，即可自动发布的github.io\n\n获取文件列表\n`hexo list <type>`\ntype为post/draft/page等\n\n清理工作目录\n`hexo clean`\n\n启动本地服务\n`hexo server -p 8090`\n\n***\n\n### 问题\n1. hexo在本地测试运行重启后页面一直空白，提示 ： `WARN No layout: index.html`,确定theme目录下，相应的目录是否存在或为空\n\n2. 部署时出现 `error deployer not found:git`错误，可以能是未安装`hexo-deployer-git`模块 。执行 ：\n    `npm install hexo-deployer-git --save`即可。  \n3. 有的theme是不支持Tags的。。。。比如Hacker\n","slug":"hexo-operate","published":1,"updated":"2016-10-28T01:11:08.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciutjxu300002x0dz9jto6cck","content":"<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><p>初始化<br><code>hexo init</code></p>\n<p>新建文章<br><code>hexo new [layout]&lt;title&gt;</code><br>如果layout为空，则使用配置文件_config.yml中的<code>default_layout</code>(默认为:post)。</p>\n<p>生成静态文件<br><code>hexo generate</code></p>\n<p>发表草稿<br><code>hexo publish [layout] &lt;filename&gt;</code></p>\n<p>部署<br><code>hexo deploy</code><br>如果配置好_config.yml中的deploy，即可自动发布的github.io</p>\n<p>获取文件列表<br><code>hexo list &lt;type&gt;</code><br>type为post/draft/page等</p>\n<p>清理工作目录<br><code>hexo clean</code></p>\n<p>启动本地服务<br><code>hexo server -p 8090</code></p>\n<hr>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ol>\n<li><p>hexo在本地测试运行重启后页面一直空白，提示 ： <code>WARN No layout: index.html</code>,确定theme目录下，相应的目录是否存在或为空</p>\n</li>\n<li><p>部署时出现 <code>error deployer not found:git</code>错误，可以能是未安装<code>hexo-deployer-git</code>模块 。执行 ：<br> <code>npm install hexo-deployer-git --save</code>即可。  </p>\n</li>\n<li>有的theme是不支持Tags的。。。。比如Hacker</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><p>初始化<br><code>hexo init</code></p>\n<p>新建文章<br><code>hexo new [layout]&lt;title&gt;</code><br>如果layout为空，则使用配置文件_config.yml中的<code>default_layout</code>(默认为:post)。</p>\n<p>生成静态文件<br><code>hexo generate</code></p>\n<p>发表草稿<br><code>hexo publish [layout] &lt;filename&gt;</code></p>\n<p>部署<br><code>hexo deploy</code><br>如果配置好_config.yml中的deploy，即可自动发布的github.io</p>\n<p>获取文件列表<br><code>hexo list &lt;type&gt;</code><br>type为post/draft/page等</p>\n<p>清理工作目录<br><code>hexo clean</code></p>\n<p>启动本地服务<br><code>hexo server -p 8090</code></p>\n<hr>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ol>\n<li><p>hexo在本地测试运行重启后页面一直空白，提示 ： <code>WARN No layout: index.html</code>,确定theme目录下，相应的目录是否存在或为空</p>\n</li>\n<li><p>部署时出现 <code>error deployer not found:git</code>错误，可以能是未安装<code>hexo-deployer-git</code>模块 。执行 ：<br> <code>npm install hexo-deployer-git --save</code>即可。  </p>\n</li>\n<li>有的theme是不支持Tags的。。。。比如Hacker</li>\n</ol>\n"},{"title":"ssh动态端口转发命令解析","date":"2016-10-27T14:38:36.000Z","_content":"#### 命令全貌：\n        ssh -qfTnN -D 0.0.0.0:1080 SSH_SERVER -l user -o ServerAliveInterval=60\n\n#### 参数说明：\n\n* `-q`   静默模式(Quiet mode).\n* `-f`    将SSH命令变为后台服务(Requests ssh to go to background just before command execution).\n* `-T`  不启用为终端，即不占用 shell 了(Disable pseudo-tty allocation).\n* `-n`  用/dev/null来当ssh的输入，阻止ssh读取本地的标准输入内容(Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background.).\n* `-N`  Do not execute a remote command. This is useful for just forwarding ports (protocol version 2 only).\n* `-D`  动态端口转发，在指定端口建立基于SOCKs4和SOCKs5协议的SOCKS服务。默认绑定IP地址为”localhost”，0.0.0.0或者”*”表示接受所以地址的请求。\n* `SSH_SERVER`  ssh服务器地址\n* `-l`  指定登录远程服务器(SSH_SERVER )的用户名\n* `-o`  参数选项(以配置文件的形式)。\n* `ServerAliveInterval=60`   number of seconds that the client will wait before sending a null packet to the server (to keep the connection alive).默认为0，设置为0即关闭该选项。\n    其他类似的相关选项还有：\n    * `ClientAliveInterval` 60 ＃server每隔60秒发送一次请求给client，然后client响应，从而保持连接\n    * `ClientAliveCountMax` 3 ＃server发出请求后，客户端没有响应得次数达到3，就自动断开连接，正常情况下，client不会不响应\n    * `ServerAliveInterval` 60 ＃client每隔60秒发送一次请求给server，然后server响应，从而保持连接\n    * `ServerAliveCountMax` 3  ＃client发出请求后，服务器端没有响应得次数达到3，就自动断开连接，正常情况下，server不会不响应","source":"_posts/ssh动态端口转发命令解析.md","raw":"---\ntitle: ssh动态端口转发命令解析\ndate: 2016-10-27 22:38:36\ntags:\n- ssh\n---\n#### 命令全貌：\n        ssh -qfTnN -D 0.0.0.0:1080 SSH_SERVER -l user -o ServerAliveInterval=60\n\n#### 参数说明：\n\n* `-q`   静默模式(Quiet mode).\n* `-f`    将SSH命令变为后台服务(Requests ssh to go to background just before command execution).\n* `-T`  不启用为终端，即不占用 shell 了(Disable pseudo-tty allocation).\n* `-n`  用/dev/null来当ssh的输入，阻止ssh读取本地的标准输入内容(Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background.).\n* `-N`  Do not execute a remote command. This is useful for just forwarding ports (protocol version 2 only).\n* `-D`  动态端口转发，在指定端口建立基于SOCKs4和SOCKs5协议的SOCKS服务。默认绑定IP地址为”localhost”，0.0.0.0或者”*”表示接受所以地址的请求。\n* `SSH_SERVER`  ssh服务器地址\n* `-l`  指定登录远程服务器(SSH_SERVER )的用户名\n* `-o`  参数选项(以配置文件的形式)。\n* `ServerAliveInterval=60`   number of seconds that the client will wait before sending a null packet to the server (to keep the connection alive).默认为0，设置为0即关闭该选项。\n    其他类似的相关选项还有：\n    * `ClientAliveInterval` 60 ＃server每隔60秒发送一次请求给client，然后client响应，从而保持连接\n    * `ClientAliveCountMax` 3 ＃server发出请求后，客户端没有响应得次数达到3，就自动断开连接，正常情况下，client不会不响应\n    * `ServerAliveInterval` 60 ＃client每隔60秒发送一次请求给server，然后server响应，从而保持连接\n    * `ServerAliveCountMax` 3  ＃client发出请求后，服务器端没有响应得次数达到3，就自动断开连接，正常情况下，server不会不响应","slug":"ssh动态端口转发命令解析","published":1,"updated":"2016-10-28T01:11:08.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciutjxu320003x0dzu4tv328s","content":"<h4 id=\"命令全貌：\"><a href=\"#命令全貌：\" class=\"headerlink\" title=\"命令全貌：\"></a>命令全貌：</h4><pre><code>ssh -qfTnN -D 0.0.0.0:1080 SSH_SERVER -l user -o ServerAliveInterval=60\n</code></pre><h4 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a>参数说明：</h4><ul>\n<li><code>-q</code>   静默模式(Quiet mode).</li>\n<li><code>-f</code>    将SSH命令变为后台服务(Requests ssh to go to background just before command execution).</li>\n<li><code>-T</code>  不启用为终端，即不占用 shell 了(Disable pseudo-tty allocation).</li>\n<li><code>-n</code>  用/dev/null来当ssh的输入，阻止ssh读取本地的标准输入内容(Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background.).</li>\n<li><code>-N</code>  Do not execute a remote command. This is useful for just forwarding ports (protocol version 2 only).</li>\n<li><code>-D</code>  动态端口转发，在指定端口建立基于SOCKs4和SOCKs5协议的SOCKS服务。默认绑定IP地址为”localhost”，0.0.0.0或者”*”表示接受所以地址的请求。</li>\n<li><code>SSH_SERVER</code>  ssh服务器地址</li>\n<li><code>-l</code>  指定登录远程服务器(SSH_SERVER )的用户名</li>\n<li><code>-o</code>  参数选项(以配置文件的形式)。</li>\n<li><code>ServerAliveInterval=60</code>   number of seconds that the client will wait before sending a null packet to the server (to keep the connection alive).默认为0，设置为0即关闭该选项。<br>  其他类似的相关选项还有：<ul>\n<li><code>ClientAliveInterval</code> 60 ＃server每隔60秒发送一次请求给client，然后client响应，从而保持连接</li>\n<li><code>ClientAliveCountMax</code> 3 ＃server发出请求后，客户端没有响应得次数达到3，就自动断开连接，正常情况下，client不会不响应</li>\n<li><code>ServerAliveInterval</code> 60 ＃client每隔60秒发送一次请求给server，然后server响应，从而保持连接</li>\n<li><code>ServerAliveCountMax</code> 3  ＃client发出请求后，服务器端没有响应得次数达到3，就自动断开连接，正常情况下，server不会不响应</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"命令全貌：\"><a href=\"#命令全貌：\" class=\"headerlink\" title=\"命令全貌：\"></a>命令全貌：</h4><pre><code>ssh -qfTnN -D 0.0.0.0:1080 SSH_SERVER -l user -o ServerAliveInterval=60\n</code></pre><h4 id=\"参数说明：\"><a href=\"#参数说明：\" class=\"headerlink\" title=\"参数说明：\"></a>参数说明：</h4><ul>\n<li><code>-q</code>   静默模式(Quiet mode).</li>\n<li><code>-f</code>    将SSH命令变为后台服务(Requests ssh to go to background just before command execution).</li>\n<li><code>-T</code>  不启用为终端，即不占用 shell 了(Disable pseudo-tty allocation).</li>\n<li><code>-n</code>  用/dev/null来当ssh的输入，阻止ssh读取本地的标准输入内容(Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background.).</li>\n<li><code>-N</code>  Do not execute a remote command. This is useful for just forwarding ports (protocol version 2 only).</li>\n<li><code>-D</code>  动态端口转发，在指定端口建立基于SOCKs4和SOCKs5协议的SOCKS服务。默认绑定IP地址为”localhost”，0.0.0.0或者”*”表示接受所以地址的请求。</li>\n<li><code>SSH_SERVER</code>  ssh服务器地址</li>\n<li><code>-l</code>  指定登录远程服务器(SSH_SERVER )的用户名</li>\n<li><code>-o</code>  参数选项(以配置文件的形式)。</li>\n<li><code>ServerAliveInterval=60</code>   number of seconds that the client will wait before sending a null packet to the server (to keep the connection alive).默认为0，设置为0即关闭该选项。<br>  其他类似的相关选项还有：<ul>\n<li><code>ClientAliveInterval</code> 60 ＃server每隔60秒发送一次请求给client，然后client响应，从而保持连接</li>\n<li><code>ClientAliveCountMax</code> 3 ＃server发出请求后，客户端没有响应得次数达到3，就自动断开连接，正常情况下，client不会不响应</li>\n<li><code>ServerAliveInterval</code> 60 ＃client每隔60秒发送一次请求给server，然后server响应，从而保持连接</li>\n<li><code>ServerAliveCountMax</code> 3  ＃client发出请求后，服务器端没有响应得次数达到3，就自动断开连接，正常情况下，server不会不响应</li>\n</ul>\n</li>\n</ul>\n"},{"title":"git 参数学习","date":"2016-10-27T02:57:07.000Z","_content":"工作实践中遇到了许多很有用的参数，在这里记录一下。\n### 全局\n* `--git-dir` .git目录(默认为当前路径)  \n    1. 一般我们都是`cd`到相应的代码库目录下进行操作，设置该参数即可从任何位置进行git操作。\n    2. `--git-dir`传入的一定是git的路径，也就是用`git init --bare`创建的目录，或者`.git`目录。\n    3. 对应的环境变量:`GIT_DIR`，可以在脚本中使用。 \n\n* `--work-tree`  工作目录(默认为当前路径)\n    1. 这个命令配合`git checkout`命令，可以方便的在生产环境导出不带`.git`目录的生产代码目录。\n    2. 对应的环境变量:`GIT_WORK_TREE`，可以在脚本中使用。\n\n* `-q --quiet` 只输出错误信息。\n\n### git init \n* `--bare` 创建一个空的git库。\n    如`GIT_DIR `未设置，则在当前目录创建。该选项创建的git库只包含git文件而不包含实际项目的源文件，所以不允许进行一般的git操作，会收到` This operation must be run in a work tree`的错误，可见并非工作目录。\n    所以一般远端仓库都是该命令初始化，可减少冲突。 \n\n### git clone\n* `--depth <depth>` 指定日志深度。\n    因为经常使用[Could9 IDE](http://c9.io),又因为硬盘免费空间只有1GB,所以经常因为.git目录过大导致无法使用。 \n\n### git checkout\n* `-f\n--force` 强制切换分支\n\n### git reset\n* `[<tree-ish>] <paths>` 切换所有`<paths>`文件或目录到`<tree-ish>`的状态。但并不会影响当前工作目录(working tree)或者当前分支。\n配合`git checkout`命令，可以实现还原单个文件历史状态的目的。\n\n### Bash中的git\ngit源码中有几个比较有用Shell脚本的插件，但是这些插件并不是默认打开的。\n* `git-completion.bash` 该脚本可以通过<tab>键自动补全shell中的git命令。\n* `git-prompt.sh` 该脚本可以自定义用户的Shell提示符（prompt)，显示当前目录下的Git仓库信息。\n这个非常有用，尤其是当我们在Shell中操作多个分支时，免驱不断重复用`git status`查看分支的烦恼。\n* 这些脚本的下载地址[https://github.com/git/git/blob/master/contrib/completion/git-completion.bash]()\n* 脚本的安装方法,[点击这里](https://git-scm.com/book/zh/v2/%E5%85%B6%E5%AE%83%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84-Git-Bash-%E4%B8%AD%E7%9A%84-Git)。","source":"_posts/git相关.md","raw":"---\ntitle: git 参数学习\ndate: 2016-10-27 10:57:07\ntags: \n- git\n---\n工作实践中遇到了许多很有用的参数，在这里记录一下。\n### 全局\n* `--git-dir` .git目录(默认为当前路径)  \n    1. 一般我们都是`cd`到相应的代码库目录下进行操作，设置该参数即可从任何位置进行git操作。\n    2. `--git-dir`传入的一定是git的路径，也就是用`git init --bare`创建的目录，或者`.git`目录。\n    3. 对应的环境变量:`GIT_DIR`，可以在脚本中使用。 \n\n* `--work-tree`  工作目录(默认为当前路径)\n    1. 这个命令配合`git checkout`命令，可以方便的在生产环境导出不带`.git`目录的生产代码目录。\n    2. 对应的环境变量:`GIT_WORK_TREE`，可以在脚本中使用。\n\n* `-q --quiet` 只输出错误信息。\n\n### git init \n* `--bare` 创建一个空的git库。\n    如`GIT_DIR `未设置，则在当前目录创建。该选项创建的git库只包含git文件而不包含实际项目的源文件，所以不允许进行一般的git操作，会收到` This operation must be run in a work tree`的错误，可见并非工作目录。\n    所以一般远端仓库都是该命令初始化，可减少冲突。 \n\n### git clone\n* `--depth <depth>` 指定日志深度。\n    因为经常使用[Could9 IDE](http://c9.io),又因为硬盘免费空间只有1GB,所以经常因为.git目录过大导致无法使用。 \n\n### git checkout\n* `-f\n--force` 强制切换分支\n\n### git reset\n* `[<tree-ish>] <paths>` 切换所有`<paths>`文件或目录到`<tree-ish>`的状态。但并不会影响当前工作目录(working tree)或者当前分支。\n配合`git checkout`命令，可以实现还原单个文件历史状态的目的。\n\n### Bash中的git\ngit源码中有几个比较有用Shell脚本的插件，但是这些插件并不是默认打开的。\n* `git-completion.bash` 该脚本可以通过<tab>键自动补全shell中的git命令。\n* `git-prompt.sh` 该脚本可以自定义用户的Shell提示符（prompt)，显示当前目录下的Git仓库信息。\n这个非常有用，尤其是当我们在Shell中操作多个分支时，免驱不断重复用`git status`查看分支的烦恼。\n* 这些脚本的下载地址[https://github.com/git/git/blob/master/contrib/completion/git-completion.bash]()\n* 脚本的安装方法,[点击这里](https://git-scm.com/book/zh/v2/%E5%85%B6%E5%AE%83%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84-Git-Bash-%E4%B8%AD%E7%9A%84-Git)。","slug":"git相关","published":1,"updated":"2016-10-27T09:55:42.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciutjxu370005x0dz33ghldky","content":"<p>工作实践中遇到了许多很有用的参数，在这里记录一下。</p>\n<h3 id=\"全局\"><a href=\"#全局\" class=\"headerlink\" title=\"全局\"></a>全局</h3><ul>\n<li><p><code>--git-dir</code> .git目录(默认为当前路径)  </p>\n<ol>\n<li>一般我们都是<code>cd</code>到相应的代码库目录下进行操作，设置该参数即可从任何位置进行git操作。</li>\n<li><code>--git-dir</code>传入的一定是git的路径，也就是用<code>git init --bare</code>创建的目录，或者<code>.git</code>目录。</li>\n<li>对应的环境变量:<code>GIT_DIR</code>，可以在脚本中使用。 </li>\n</ol>\n</li>\n<li><p><code>--work-tree</code>  工作目录(默认为当前路径)</p>\n<ol>\n<li>这个命令配合<code>git checkout</code>命令，可以方便的在生产环境导出不带<code>.git</code>目录的生产代码目录。</li>\n<li>对应的环境变量:<code>GIT_WORK_TREE</code>，可以在脚本中使用。</li>\n</ol>\n</li>\n<li><p><code>-q --quiet</code> 只输出错误信息。</p>\n</li>\n</ul>\n<h3 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h3><ul>\n<li><code>--bare</code> 创建一个空的git库。<br>  如<code>GIT_DIR</code>未设置，则在当前目录创建。该选项创建的git库只包含git文件而不包含实际项目的源文件，所以不允许进行一般的git操作，会收到<code>This operation must be run in a work tree</code>的错误，可见并非工作目录。<br>  所以一般远端仓库都是该命令初始化，可减少冲突。 </li>\n</ul>\n<h3 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h3><ul>\n<li><code>--depth &lt;depth&gt;</code> 指定日志深度。<br>  因为经常使用<a href=\"http://c9.io\" target=\"_blank\" rel=\"external\">Could9 IDE</a>,又因为硬盘免费空间只有1GB,所以经常因为.git目录过大导致无法使用。 </li>\n</ul>\n<h3 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h3><ul>\n<li><code>-f\n--force</code> 强制切换分支</li>\n</ul>\n<h3 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h3><ul>\n<li><code>[&lt;tree-ish&gt;] &lt;paths&gt;</code> 切换所有<code>&lt;paths&gt;</code>文件或目录到<code>&lt;tree-ish&gt;</code>的状态。但并不会影响当前工作目录(working tree)或者当前分支。<br>配合<code>git checkout</code>命令，可以实现还原单个文件历史状态的目的。</li>\n</ul>\n<h3 id=\"Bash中的git\"><a href=\"#Bash中的git\" class=\"headerlink\" title=\"Bash中的git\"></a>Bash中的git</h3><p>git源码中有几个比较有用Shell脚本的插件，但是这些插件并不是默认打开的。</p>\n<ul>\n<li><code>git-completion.bash</code> 该脚本可以通过<tab>键自动补全shell中的git命令。</tab></li>\n<li><code>git-prompt.sh</code> 该脚本可以自定义用户的Shell提示符（prompt)，显示当前目录下的Git仓库信息。<br>这个非常有用，尤其是当我们在Shell中操作多个分支时，免驱不断重复用<code>git status</code>查看分支的烦恼。</li>\n<li>这些脚本的下载地址<a href=\"\">https://github.com/git/git/blob/master/contrib/completion/git-completion.bash</a></li>\n<li>脚本的安装方法,<a href=\"https://git-scm.com/book/zh/v2/%E5%85%B6%E5%AE%83%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84-Git-Bash-%E4%B8%AD%E7%9A%84-Git\" target=\"_blank\" rel=\"external\">点击这里</a>。</li>\n</ul>\n","excerpt":"","more":"<p>工作实践中遇到了许多很有用的参数，在这里记录一下。</p>\n<h3 id=\"全局\"><a href=\"#全局\" class=\"headerlink\" title=\"全局\"></a>全局</h3><ul>\n<li><p><code>--git-dir</code> .git目录(默认为当前路径)  </p>\n<ol>\n<li>一般我们都是<code>cd</code>到相应的代码库目录下进行操作，设置该参数即可从任何位置进行git操作。</li>\n<li><code>--git-dir</code>传入的一定是git的路径，也就是用<code>git init --bare</code>创建的目录，或者<code>.git</code>目录。</li>\n<li>对应的环境变量:<code>GIT_DIR</code>，可以在脚本中使用。 </li>\n</ol>\n</li>\n<li><p><code>--work-tree</code>  工作目录(默认为当前路径)</p>\n<ol>\n<li>这个命令配合<code>git checkout</code>命令，可以方便的在生产环境导出不带<code>.git</code>目录的生产代码目录。</li>\n<li>对应的环境变量:<code>GIT_WORK_TREE</code>，可以在脚本中使用。</li>\n</ol>\n</li>\n<li><p><code>-q --quiet</code> 只输出错误信息。</p>\n</li>\n</ul>\n<h3 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h3><ul>\n<li><code>--bare</code> 创建一个空的git库。<br>  如<code>GIT_DIR</code>未设置，则在当前目录创建。该选项创建的git库只包含git文件而不包含实际项目的源文件，所以不允许进行一般的git操作，会收到<code>This operation must be run in a work tree</code>的错误，可见并非工作目录。<br>  所以一般远端仓库都是该命令初始化，可减少冲突。 </li>\n</ul>\n<h3 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h3><ul>\n<li><code>--depth &lt;depth&gt;</code> 指定日志深度。<br>  因为经常使用<a href=\"http://c9.io\">Could9 IDE</a>,又因为硬盘免费空间只有1GB,所以经常因为.git目录过大导致无法使用。 </li>\n</ul>\n<h3 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h3><ul>\n<li><code>-f\n--force</code> 强制切换分支</li>\n</ul>\n<h3 id=\"git-reset\"><a href=\"#git-reset\" class=\"headerlink\" title=\"git reset\"></a>git reset</h3><ul>\n<li><code>[&lt;tree-ish&gt;] &lt;paths&gt;</code> 切换所有<code>&lt;paths&gt;</code>文件或目录到<code>&lt;tree-ish&gt;</code>的状态。但并不会影响当前工作目录(working tree)或者当前分支。<br>配合<code>git checkout</code>命令，可以实现还原单个文件历史状态的目的。</li>\n</ul>\n<h3 id=\"Bash中的git\"><a href=\"#Bash中的git\" class=\"headerlink\" title=\"Bash中的git\"></a>Bash中的git</h3><p>git源码中有几个比较有用Shell脚本的插件，但是这些插件并不是默认打开的。</p>\n<ul>\n<li><code>git-completion.bash</code> 该脚本可以通过<tab>键自动补全shell中的git命令。</li>\n<li><code>git-prompt.sh</code> 该脚本可以自定义用户的Shell提示符（prompt)，显示当前目录下的Git仓库信息。<br>这个非常有用，尤其是当我们在Shell中操作多个分支时，免驱不断重复用<code>git status</code>查看分支的烦恼。</li>\n<li>这些脚本的下载地址<a href=\"\">https://github.com/git/git/blob/master/contrib/completion/git-completion.bash</a></li>\n<li>脚本的安装方法,<a href=\"https://git-scm.com/book/zh/v2/%E5%85%B6%E5%AE%83%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84-Git-Bash-%E4%B8%AD%E7%9A%84-Git\">点击这里</a>。</li>\n</ul>\n"},{"title":"tmux常用命令","date":"2016-10-24T09:07:13.000Z","_content":"#### Ctrl+b\t激活控制台；此时以下按键生效\n******\n### 系统操作\n|||\n|:--------:|:-------------|\n|?|\t列出所有快捷键；按q返回|\n|d|\t脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话|\n|D|\t选择要脱离的会话；在同时开启了多个会话时使用|\n|Ctrl+z|\t挂起当前会话|\n|r|\t强制重绘未脱离的会话|\n|s|\t选择并切换会话；在同时开启了多个会话时使用|\n|:|\t进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器|\n|[|\t进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出|\n|~|\t列出提示信息缓存；其中包含了之前tmux返回的各种提示信息|\n\n### 窗口操作\n|||\n|:--------:|:-------------|\n|c|\t创建新窗口|\n|&|\t关闭当前窗口|\n|数字键|切换至指定窗口|\n|p|\t切换至上一窗口|\n|n|\t切换至下一窗口|\n|l|\t在前后两个窗口间互相切换|\n|w|\t通过窗口列表切换窗口|\n|,|\t重命名当前窗口；这样便于识别|\n|.|\t修改当前窗口编号；相当于窗口重新排序|\n|f|\t在所有窗口中查找指定文本|\n\n### 面板操作\t\n|||\n|:--------:|:-------------|\t\n|“|\t将当前面板平分为上下两块|\n|%|\t将当前面板平分为左右两块|\n|x|\t关闭当前面板|\n|!|\t将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板|\n|Ctrl+方向键| 以1个单元格为单位移动边缘以调整当前面板大小|\n|Alt+方向键| 以5个单元格为单位移动边缘以调整当前面板大小|\n|Space|\t在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled|\n|q|\t显示面板编号|\n|o|\t在当前窗口中选择下一面板|\n|方向键|\t移动光标以选择面板|\n|{|\t向前置换当前面板|\n|}|\t向后置换当前面板|\n|Alt+o|\t逆时针旋转当前窗口的面板|\n|Ctrl+o|\t顺时针旋转当前窗口的面板|","source":"_posts/tmux.md","raw":"---\ntitle: tmux常用命令\ndate: 2016-10-24 17:07:13\ntags:\n- linux\n- tmux\n---\n#### Ctrl+b\t激活控制台；此时以下按键生效\n******\n### 系统操作\n|||\n|:--------:|:-------------|\n|?|\t列出所有快捷键；按q返回|\n|d|\t脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话|\n|D|\t选择要脱离的会话；在同时开启了多个会话时使用|\n|Ctrl+z|\t挂起当前会话|\n|r|\t强制重绘未脱离的会话|\n|s|\t选择并切换会话；在同时开启了多个会话时使用|\n|:|\t进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器|\n|[|\t进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出|\n|~|\t列出提示信息缓存；其中包含了之前tmux返回的各种提示信息|\n\n### 窗口操作\n|||\n|:--------:|:-------------|\n|c|\t创建新窗口|\n|&|\t关闭当前窗口|\n|数字键|切换至指定窗口|\n|p|\t切换至上一窗口|\n|n|\t切换至下一窗口|\n|l|\t在前后两个窗口间互相切换|\n|w|\t通过窗口列表切换窗口|\n|,|\t重命名当前窗口；这样便于识别|\n|.|\t修改当前窗口编号；相当于窗口重新排序|\n|f|\t在所有窗口中查找指定文本|\n\n### 面板操作\t\n|||\n|:--------:|:-------------|\t\n|“|\t将当前面板平分为上下两块|\n|%|\t将当前面板平分为左右两块|\n|x|\t关闭当前面板|\n|!|\t将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板|\n|Ctrl+方向键| 以1个单元格为单位移动边缘以调整当前面板大小|\n|Alt+方向键| 以5个单元格为单位移动边缘以调整当前面板大小|\n|Space|\t在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled|\n|q|\t显示面板编号|\n|o|\t在当前窗口中选择下一面板|\n|方向键|\t移动光标以选择面板|\n|{|\t向前置换当前面板|\n|}|\t向后置换当前面板|\n|Alt+o|\t逆时针旋转当前窗口的面板|\n|Ctrl+o|\t顺时针旋转当前窗口的面板|","slug":"tmux","published":1,"updated":"2016-10-25T02:30:06.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciutjxu390006x0dzfpvebxsu","content":"<h4 id=\"Ctrl-b-激活控制台；此时以下按键生效\"><a href=\"#Ctrl-b-激活控制台；此时以下按键生效\" class=\"headerlink\" title=\"Ctrl+b    激活控制台；此时以下按键生效\"></a>Ctrl+b    激活控制台；此时以下按键生效</h4><hr>\n<h3 id=\"系统操作\"><a href=\"#系统操作\" class=\"headerlink\" title=\"系统操作\"></a>系统操作</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:left\">列出所有快捷键；按q返回</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d</td>\n<td style=\"text-align:left\">脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:left\">选择要脱离的会话；在同时开启了多个会话时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+z</td>\n<td style=\"text-align:left\">挂起当前会话</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:left\">强制重绘未脱离的会话</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s</td>\n<td style=\"text-align:left\">选择并切换会话；在同时开启了多个会话时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:</td>\n<td style=\"text-align:left\">进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[</td>\n<td style=\"text-align:left\">进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">~</td>\n<td style=\"text-align:left\">列出提示信息缓存；其中包含了之前tmux返回的各种提示信息</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"窗口操作\"><a href=\"#窗口操作\" class=\"headerlink\" title=\"窗口操作\"></a>窗口操作</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">c</td>\n<td style=\"text-align:left\">创建新窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&amp;</td>\n<td style=\"text-align:left\">关闭当前窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数字键</td>\n<td style=\"text-align:left\">切换至指定窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p</td>\n<td style=\"text-align:left\">切换至上一窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:left\">切换至下一窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">l</td>\n<td style=\"text-align:left\">在前后两个窗口间互相切换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:left\">通过窗口列表切换窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">,</td>\n<td style=\"text-align:left\">重命名当前窗口；这样便于识别</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.</td>\n<td style=\"text-align:left\">修改当前窗口编号；相当于窗口重新排序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f</td>\n<td style=\"text-align:left\">在所有窗口中查找指定文本</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"面板操作\"><a href=\"#面板操作\" class=\"headerlink\" title=\"面板操作\"></a>面板操作</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">“</td>\n<td style=\"text-align:left\">将当前面板平分为上下两块</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:left\">将当前面板平分为左右两块</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:left\">关闭当前面板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!</td>\n<td style=\"text-align:left\">将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+方向键</td>\n<td style=\"text-align:left\">以1个单元格为单位移动边缘以调整当前面板大小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+方向键</td>\n<td style=\"text-align:left\">以5个单元格为单位移动边缘以调整当前面板大小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Space</td>\n<td style=\"text-align:left\">在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">q</td>\n<td style=\"text-align:left\">显示面板编号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">o</td>\n<td style=\"text-align:left\">在当前窗口中选择下一面板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">方向键</td>\n<td style=\"text-align:left\">移动光标以选择面板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{</td>\n<td style=\"text-align:left\">向前置换当前面板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">}</td>\n<td style=\"text-align:left\">向后置换当前面板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+o</td>\n<td style=\"text-align:left\">逆时针旋转当前窗口的面板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+o</td>\n<td style=\"text-align:left\">顺时针旋转当前窗口的面板</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h4 id=\"Ctrl-b-激活控制台；此时以下按键生效\"><a href=\"#Ctrl-b-激活控制台；此时以下按键生效\" class=\"headerlink\" title=\"Ctrl+b    激活控制台；此时以下按键生效\"></a>Ctrl+b    激活控制台；此时以下按键生效</h4><hr>\n<h3 id=\"系统操作\"><a href=\"#系统操作\" class=\"headerlink\" title=\"系统操作\"></a>系统操作</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:left\">列出所有快捷键；按q返回</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d</td>\n<td style=\"text-align:left\">脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:left\">选择要脱离的会话；在同时开启了多个会话时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+z</td>\n<td style=\"text-align:left\">挂起当前会话</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:left\">强制重绘未脱离的会话</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s</td>\n<td style=\"text-align:left\">选择并切换会话；在同时开启了多个会话时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:</td>\n<td style=\"text-align:left\">进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[</td>\n<td style=\"text-align:left\">进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">~</td>\n<td style=\"text-align:left\">列出提示信息缓存；其中包含了之前tmux返回的各种提示信息</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"窗口操作\"><a href=\"#窗口操作\" class=\"headerlink\" title=\"窗口操作\"></a>窗口操作</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">c</td>\n<td style=\"text-align:left\">创建新窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&amp;</td>\n<td style=\"text-align:left\">关闭当前窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数字键</td>\n<td style=\"text-align:left\">切换至指定窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p</td>\n<td style=\"text-align:left\">切换至上一窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:left\">切换至下一窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">l</td>\n<td style=\"text-align:left\">在前后两个窗口间互相切换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:left\">通过窗口列表切换窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">,</td>\n<td style=\"text-align:left\">重命名当前窗口；这样便于识别</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.</td>\n<td style=\"text-align:left\">修改当前窗口编号；相当于窗口重新排序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">f</td>\n<td style=\"text-align:left\">在所有窗口中查找指定文本</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"面板操作\"><a href=\"#面板操作\" class=\"headerlink\" title=\"面板操作\"></a>面板操作</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">“</td>\n<td style=\"text-align:left\">将当前面板平分为上下两块</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:left\">将当前面板平分为左右两块</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">x</td>\n<td style=\"text-align:left\">关闭当前面板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!</td>\n<td style=\"text-align:left\">将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+方向键</td>\n<td style=\"text-align:left\">以1个单元格为单位移动边缘以调整当前面板大小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+方向键</td>\n<td style=\"text-align:left\">以5个单元格为单位移动边缘以调整当前面板大小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Space</td>\n<td style=\"text-align:left\">在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">q</td>\n<td style=\"text-align:left\">显示面板编号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">o</td>\n<td style=\"text-align:left\">在当前窗口中选择下一面板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">方向键</td>\n<td style=\"text-align:left\">移动光标以选择面板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">{</td>\n<td style=\"text-align:left\">向前置换当前面板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">}</td>\n<td style=\"text-align:left\">向后置换当前面板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+o</td>\n<td style=\"text-align:left\">逆时针旋转当前窗口的面板</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+o</td>\n<td style=\"text-align:left\">顺时针旋转当前窗口的面板</td>\n</tr>\n</tbody>\n</table>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciutjxu300002x0dz9jto6cck","tag_id":"ciutjxu330004x0dzq5sk59gw","_id":"ciutjxu3d0009x0dzrvvdr9eh"},{"post_id":"ciutjxu300002x0dz9jto6cck","tag_id":"ciutjxu3c0007x0dzhnqmip2n","_id":"ciutjxu3d000ax0dze5k54deo"},{"post_id":"ciutjxu320003x0dzu4tv328s","tag_id":"ciutjxu3d0008x0dzpg4d5y17","_id":"ciutjxu3e000cx0dzt8g2iahh"},{"post_id":"ciutjxu370005x0dz33ghldky","tag_id":"ciutjxu3e000bx0dzr7z7el22","_id":"ciutjxu3e000ex0dz9e231oqc"},{"post_id":"ciutjxu390006x0dzfpvebxsu","tag_id":"ciutjxu3e000dx0dz1978s2l5","_id":"ciutjxu3f000gx0dz5qgvetay"},{"post_id":"ciutjxu390006x0dzfpvebxsu","tag_id":"ciutjxu3f000fx0dzyayrq9xv","_id":"ciutjxu3f000hx0dzdd3k4u8w"},{"post_id":"ciutjxu2u0000x0dzxv4bm8kt","tag_id":"ciutjxu3e000bx0dzr7z7el22","_id":"ciutki2x6000jx0dznqnfxncj"}],"Tag":[{"name":"hexo","_id":"ciutjxu330004x0dzq5sk59gw"},{"name":"github","_id":"ciutjxu3c0007x0dzhnqmip2n"},{"name":"ssh","_id":"ciutjxu3d0008x0dzpg4d5y17"},{"name":"git","_id":"ciutjxu3e000bx0dzr7z7el22"},{"name":"linux","_id":"ciutjxu3e000dx0dz1978s2l5"},{"name":"tmux","_id":"ciutjxu3f000fx0dzyayrq9xv"}]}}